{
    "bugObjectList": [
        {
            "bugDescription": "111111111111111",
            "bugLine": 0,
            "bugName": "11111",
            "bugNature": "Performance Bug"
        },
        {
            "bugDescription": "3333333333333333333",
            "bugLine": 2,
            "bugName": "3333333333",
            "bugNature": "Performance Bug"
        },
        {
            "bugDescription": "888888888888888888",
            "bugLine": 7,
            "bugName": "888",
            "bugNature": "Performance Bug"
        },
        {
            "bugDescription": "131313131313",
            "bugLine": 12,
            "bugName": "13131313",
            "bugNature": "Concurrency Bug"
        }
    ],
    "methodName": "void VideoRecorder::startRecording()",
    "projectName": "06171511",
    "projectPath": "E:/HMPP-main/userInterface/testcode/06171511",
    "segmentList": [
        4,
        13,
        18,
        27
    ],
    "sourceCode": "void VideoRecorder::startRecording() {\n    if (recording) {\n        std::cerr << \"Error: Recording is already in progress.\" << std::endl;\n        return;\n    }\n\n    std::string timestamp = timeManager.getCurrentTimestamp();\n    currentVideoFilePath = \"video_\" + timestamp + \".mp4\";\n\n    videoFileStream.open(currentVideoFilePath, std::ios::binary);\n    if (!videoFileStream.is_open()) {\n        std::cerr << \"Error: Failed to open video file for recording.\" << std::endl;\n        return;\n    }\n\n    writeMetadataHeader();\n\n    recording = true;\n    std::cout << \"Recording started. Saving to: \" << currentVideoFilePath << std::endl;\n\n    for (int i = 0; i < 150; ++i) { \n        if (!recording) break; \n        embedTimestampAndGPS(); \n        videoFileStream << \"VideoFrameData\"; \n        std::this_thread::sleep_for(std::chrono::milliseconds(33)); // Simulate 30 fps (1000/30 â‰ˆ 33 ms)\n    }\n\n}"
}
